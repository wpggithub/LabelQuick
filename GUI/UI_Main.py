# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtWidgets import QMessageBox
import xml.etree.ElementTree as ET
import os


# 鼠标绘画事件
class MyLabel(QtWidgets.QLabel):
    def __init__(self, parent=None):
        super(MyLabel, self).__init__(parent)
        self.x0, self.y0 = 0, 0  # 鼠标按下的初始位置
        self.x1, self.y1 = 0, 0  # 鼠标当前位置
        self.flag = False  # 鼠标是否按下
        self.move = False  # 是否在移动状态

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.x0, self.y0 = event.pos().x(), event.pos().y()
            self.flag = True

    def mouseMoveEvent(self, event):
        if self.flag:
            self.move = True
            self.x1, self.y1 = event.pos().x(), event.pos().y()
            self.update()

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.flag = False
            self.move = False

    def paintEvent(self, event):
        super().paintEvent(event)
        if self.flag and self.move:
            painter = QtGui.QPainter(self)
            painter.setPen(QtGui.QPen(QtCore.Qt.red, 2, QtCore.Qt.SolidLine))
            painter.drawRect(QtCore.QRect(self.x0, self.y0, self.x1 - self.x0, self.y1 - self.y0))



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1618, 947)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("GUI/icons/logo.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.splitter = QtWidgets.QSplitter(self.frame)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.scrollArea = QtWidgets.QScrollArea(self.splitter)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1298, 848))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(1300, 850))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_3.setGeometry(QtCore.QRect(9, 9, 2000, 1000))
        self.label_3.setStyleSheet("background: gray;")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")

        # 添加图片信息标签
        self.label_image_info = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_image_info.setGeometry(QtCore.QRect(10, 10, 800, 30))
        self.label_image_info.setStyleSheet("background-color: rgba(0, 0, 0, 120); color: white; font: bold 12pt 'Arial'; padding: 5px;")
        self.label_image_info.setText("")
        self.label_image_info.setAlignment(QtCore.Qt.AlignLeft)
        self.label_image_info.setObjectName("label_image_info")
        self.label_image_info.raise_()  # 确保显示在最上层
        self.label_image_info.hide()  # 初始隐藏

        self.videoWidget = QVideoWidget(self.label_3)

        self.mediaPlayer = QMediaPlayer()
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        
        self.label_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 2000, 1000))
        self.label_4.setMouseTracking(True)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")

        # 如果 scrollAreaWidgetContents 没有布局，给它设置一个默认布局
        if not self.scrollAreaWidgetContents.layout():
            self.layout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
            self.scrollAreaWidgetContents.setLayout(self.layout)

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.layoutWidget = QtWidgets.QWidget(self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        MainWindow.setCentralWidget(self.centralwidget)
        self.setSplitterSizes()

        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.comboBox = QtWidgets.QComboBox(self.layoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")

        self.comboBox.setFocusPolicy(QtCore.Qt.NoFocus)

        self.verticalLayout.addWidget(self.comboBox)
        self.frame_2 = QtWidgets.QFrame(self.layoutWidget)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 50))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        
        # 添加进度条
        self.progressBar = QtWidgets.QProgressBar(self.frame_2)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setValue(0)
        self.progressBar.hide()  # 初始状态隐藏
        self.verticalLayout_2.addWidget(self.progressBar)
        
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setStyleSheet("font: 75 11pt \"Arial\";\n"
"")
        self.label_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.horizontalSlider = QtWidgets.QSlider(self.frame_2)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider)
        self.pushButton = QtWidgets.QPushButton(self.frame_2)
        self.pushButton.setEnabled(False)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setEnabled(False)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_3.setEnabled(False)
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_2.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_4.setEnabled(False)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_5.setEnabled(False)
        self.pushButton_5.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)

       # 添加"视频打标"标签
        self.label_video_marking = QtWidgets.QLabel(self.frame_2)
        self.label_video_marking.setStyleSheet("font: 75 11pt \"Arial\";")
        self.label_video_marking.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_video_marking.setObjectName("label_video_marking")
        self.verticalLayout_2.addWidget(self.label_video_marking)

        # 添加"开始检测打标"按钮
        self.pushButton_start_marking = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_start_marking.setEnabled(False)
        self.pushButton_start_marking.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_start_marking.setObjectName("pushButton_start_marking")
        self.verticalLayout_2.addWidget(self.pushButton_start_marking)

        self.verticalLayout.addWidget(self.frame_2)
        
        # 添加标签箱和删除按钮的容器
        self.label_box_container = QtWidgets.QWidget(self.layoutWidget)
        self.label_box_container.setObjectName("label_box_container")
        self.label_box_layout = QtWidgets.QHBoxLayout(self.label_box_container)
        self.label_box_layout.setContentsMargins(0, 0, 0, 0)
        self.label_box_layout.setObjectName("label_box_layout")
        
        # 标签箱标题
        self.label_2 = QtWidgets.QLabel(self.label_box_container)
        self.label_2.setObjectName("label_2")
        self.label_box_layout.addWidget(self.label_2)
        
        # 添加弹簧
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.label_box_layout.addItem(spacerItem)
        
        # 添加删除标签按钮
        self.delete_label_button = QtWidgets.QPushButton(self.label_box_container)
        self.delete_label_button.setObjectName("delete_label_button")
        self.delete_label_button.setMaximumWidth(80)
        self.label_box_layout.addWidget(self.delete_label_button)
        
        # 连接删除标签按钮信号
        self.delete_label_button.clicked.connect(self.delete_selected_label)
        
        self.verticalLayout.addWidget(self.label_box_container)
        
        self.listWidget = QtWidgets.QListWidget(self.layoutWidget)
        self.listWidget.setObjectName("listWidget")

        self.listWidget.setFocusPolicy(QtCore.Qt.NoFocus)

        self.verticalLayout.addWidget(self.listWidget)
        self.horizontalLayout_2.addWidget(self.splitter)
        self.horizontalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1618, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setEnabled(True)
        self.toolBar.setIconSize(QtCore.QSize(45, 45))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)
        self.actionOpen_Dir = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("GUI/icons/open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_Dir.setIcon(icon1)
        self.actionOpen_Dir.setObjectName("actionOpen_Dir")

        self.actionOpen_Dir.triggered.connect(self.enableLabel4)

        self.actionChange_Save_Dir = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("GUI/icons/save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionChange_Save_Dir.setIcon(icon2)
        self.actionChange_Save_Dir.setObjectName("actionChange_Save_Dir")
        self.actionNext_Image = QtWidgets.QAction(MainWindow)
        self.actionNext_Image.setEnabled(False)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("GUI/icons/next.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNext_Image.setIcon(icon3)
        self.actionNext_Image.setObjectName("actionNext_Image")
        self.actionPrev_Image = QtWidgets.QAction(MainWindow)
        self.actionPrev_Image.setEnabled(False)
        self.actionVideo_marking = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("GUI/icons/Video_marking.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionVideo_marking.setIcon(icon7)
        self.actionVideo_marking.setObjectName("actionVideo_marking")

        self.actionVideo_marking.triggered.connect(self.enableLabel4)

        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("GUI/icons/prev.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPrev_Image.setIcon(icon4)
        self.actionPrev_Image.setObjectName("actionPrev_Image")
        self.actionCreate_RectBox = QtWidgets.QAction(MainWindow)
        self.actionCreate_RectBox.setEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("GUI/icons/create.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCreate_RectBox.setIcon(icon5)
        self.actionCreate_RectBox.setObjectName("actionCreate_RectBox")
        self.actionOpen_Video = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("GUI/icons/video.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen_Video.setIcon(icon6)
        self.actionOpen_Video.setObjectName("actionOpen_Video")
        


        self.actionOpen_Video.triggered.connect(self.disableLabel4)

        self.toolBar.addAction(self.actionOpen_Video)
        self.toolBar.addAction(self.actionOpen_Dir)
        self.toolBar.addAction(self.actionChange_Save_Dir)
        self.toolBar.addAction(self.actionVideo_marking)
        self.toolBar.addAction(self.actionNext_Image)
        self.toolBar.addAction(self.actionPrev_Image)
        self.toolBar.addAction(self.actionCreate_RectBox)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setSplitterSizes(self):
        # 根据当前 splitter 的宽度设置比例
        total_size = self.splitter.size().width()
        size1 = int(0.8 * total_size)  # 第一个区域占75%
        size2 = total_size - size1  # 第二个区域占剩余的20%
        self.splitter.setSizes([size1, size2])

    def enableLabel4(self):
        # 点击打开目录后启用 MyLabel
        self.label_4.deleteLater()  # 删除原来的 QLabel
        
        # 创建 MyLabel 实例并添加到布局
        self.label_4 = MyLabel(self.scrollAreaWidgetContents)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 2000, 1000))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.scrollAreaWidgetContents.layout().addWidget(self.label_4)
        
        # 显示图片信息标签
        self.label_image_info.show()


    def disableLabel4(self):
        self.label_4.deleteLater()  # 删除原来的 QLabel
        
        self.label_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 2000, 1000))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.scrollAreaWidgetContents.layout().addWidget(self.label_4)
        
        # 隐藏图片信息标签
        self.label_image_info.hide()
        
    # 添加更新图片信息的方法
    def updateImageInfo(self, image_name, current_index, total_images):
        """
        更新图片信息标签
        :param image_name: 图片名称
        :param current_index: 当前图片索引
        :param total_images: 文件夹中图片总数
        """
        info_text = f"图片名称: {image_name}   |   当前第 {current_index} 张，共 {total_images} 张"
        self.label_image_info.setText(info_text)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "LabelQuick"))
        self.label.setText(_translate("MainWindow", "选择保存类型"))
        self.comboBox.setItemText(0, _translate("MainWindow", "XML"))
        self.label_2.setText(_translate("MainWindow", "标签箱"))
        self.delete_label_button.setText(_translate("MainWindow", "删除标签"))
        self.label_5.setText(_translate("MainWindow", "视频操作："))
        self.pushButton.setText(_translate("MainWindow", "开始"))
        self.pushButton_2.setText(_translate("MainWindow", "暂停"))
        self.pushButton_3.setText(_translate("MainWindow", "抽帧"))
        self.pushButton_5.setText(_translate("MainWindow", "自动抽帧"))
        self.pushButton_4.setText(_translate("MainWindow", "重新播放"))
        self.label_video_marking.setText(_translate("MainWindow", "视频打标"))
        self.pushButton_start_marking.setText(_translate("MainWindow", "目标跟踪标注"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen_Dir.setText(_translate("MainWindow", "Open Dir"))
        self.actionOpen_Dir.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actionChange_Save_Dir.setText(_translate("MainWindow", "Change Save Dir"))
        self.actionChange_Save_Dir.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionNext_Image.setText(_translate("MainWindow", "Next Image"))
        self.actionNext_Image.setShortcut(_translate("MainWindow", "D"))
        self.actionPrev_Image.setText(_translate("MainWindow", "Prev Image"))
        self.actionPrev_Image.setShortcut(_translate("MainWindow", "A"))
        self.actionCreate_RectBox.setText(_translate("MainWindow", "Create RectBox"))
        self.actionCreate_RectBox.setShortcut(_translate("MainWindow", "W"))
        self.actionOpen_Video.setText(_translate("MainWindow", "Open Video"))
        self.actionOpen_Video.setShortcut(_translate("MainWindow", "V"))
        self.actionVideo_marking.setText(_translate("MainWindow", "Video marking"))

    # 添加删除标签方法
    def delete_selected_label(self):
        """
        删除在标签箱中选中的标签和XML文件中对应的标注框
        """
        # 获取当前选中的标签项
        selected_items = self.listWidget.selectedItems()
        
        if not selected_items:
            # 如果没有选中任何标签，提示用户
            QMessageBox.information(None, "提示", "请先选择需要删除的标签")
            return
        
        # 确认删除对话框
        reply = QMessageBox.question(None, "确认删除", 
                                    f"确定要删除选中的标签吗?",
                                    QMessageBox.Yes | QMessageBox.No, 
                                    QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # 用户确认删除
            # 创建一个删除标签的事件，将在主窗口中处理
            self.parent_window = self.listWidget.window()
            
            # 收集要删除的标签文本和它们的索引
            labels_to_delete = []
            indices_to_delete = []
            
            for item in selected_items:
                # 获取标签文本和索引
                label_text = item.text()
                row = self.listWidget.row(item)
                
                # 将索引和文本作为元组添加到列表中
                labels_to_delete.append((row, label_text))
                
                # 从列表中移除此项
                self.listWidget.takeItem(row)
            
            # 如果父窗口有删除标签和XML的方法，则调用
            if hasattr(self.parent_window, 'delete_labels_from_xml'):
                self.parent_window.delete_labels_from_xml(labels_to_delete)

